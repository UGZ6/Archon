# ====================================================================
#  N8N ECOSYSTEM DOCKER COMPOSE
#  Version: 3.3 (Finalized by ZeeGame & Guzel)
# ====================================================================
networks:
  n8n-network:
    driver: bridge

volumes:
  n8n-projects_postgres-data:
    external: true  # Reminder: Create with 'docker volume create n8n-projects_postgres-data' before first run
  n8n-data:
    driver: local
  qdrant-storage:
    driver: local
  redis-data:
    driver: local

services:
  postgres:
    image: postgres:17
    container_name: n8n_postgres
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - n8n-projects_postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "127.0.0.1:6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  n8n:
    image: n8nio/n8n:${N8N_VERSION}
    container_name: n8n_main
    restart: unless-stopped
    ports:
      - "127.0.0.1:5678:5678"
    env_file:
      - .env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - QUEUE_BULL_REDIS_HOST=${REDIS_HOST}
      - QUEUE_BULL_REDIS_PORT=${REDIS_PORT}
      - QUEUE_BULL_REDIS_USER=${REDIS_USER}
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - EXECUTIONS_MODE=queue
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network

  qdrant:
    image: qdrant/qdrant:v1.9.0
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "127.0.0.1:6333:6333" # REST
      - "127.0.0.1:6334:6334" # gRPC
    env_file:
      - .env
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334

      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    volumes:
      - qdrant-storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - n8n-network
    
